name: Build and Deploy to Google Cloud Run

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  PROJECT_ID: protean-horizon-457804-v7
  SERVICE_NAME: mentormate-ms
  REGION: us-central1


jobs:
  build_and_deploy:
    name: Build and Deploy to Cloud Run
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
# Verify and use service account key
    - name: Setup Google Cloud Auth
      run: |
        echo "Verifying service account key..."
        echo '${{ secrets.GCP_SA_KEY }}' > /tmp/sa-key.json
        if ! jq -e . >/dev/null 2>&1 < /tmp/sa-key.json; then
        echo "Error: Invalid JSON in service account key"
        exit 1
        fi

        echo "Activating service account..."
        gcloud auth activate-service-account --key-file=/tmp/sa-key.json

        echo "Setting project..."
        gcloud config set project ${{ env.PROJECT_ID }}

        echo "Verifying authentication..."
        gcloud auth list
        gcloud config list

    - name: Set up Google Cloud SDK
      uses: 'google-github-actions/setup-gcloud@v2'
      with:
        project_id: ${{ env.PROJECT_ID }}
        install_components: 'beta,docker-credential-gcr'

    - name: Verify Authentication
      run: |
        echo "Verifying authentication..."
        gcloud auth list
        echo "Current project:"
        gcloud config get-value project

# Print service account information for debugging
    - name: Print service account info
      run: |
        echo "Current service account:"
        gcloud config list account --format "value(core.account)"
        echo "Available APIs:"
        gcloud services list --enabled

# Verify Service Account Key Format
    - name: Verify Service Account Key Format
      run: |
        echo "Checking GitHub secret format..."
        echo '${{ secrets.GCP_SA_KEY }}' | jq -r 'keys' || echo "Secret is not valid JSON"

    - name: Validate Secrets
      env:
        DB_HOST: ${{ secrets.DB_HOST }}
        DB_PORT: ${{ secrets.DB_PORT }}
        DB_NAME: ${{ secrets.DB_NAME }}
        DB_USERNAME: ${{ secrets.DB_USERNAME }}
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        DB_SCHEMA: ${{ secrets.DB_SCHEMA }}
        

      run: |
        required_secrets=(DB_HOST DB_PORT DB_NAME DB_USERNAME DB_PASSWORD DB_SCHEMA )
        for s in "${required_secrets[@]}"; do
          if [ -z "${!s}" ]; then
            echo "Missing required secret: $s"
            exit 1
          fi
        done
        echo "All required secrets are present."

# Trigger Cloud Build directly without GCS staging
    - name: Trigger Cloud Build
      run: |
        echo "Starting Cloud Build..."
        gcloud builds submit --config=cloudrun-build.yml --substitutions="_DB_HOST=${{ secrets.DB_HOST }},_DB_PORT=${{ secrets.DB_PORT }},_DB_NAME=${{ secrets.DB_NAME }},_DB_USERNAME=${{ secrets.DB_USERNAME }},_DB_PASSWORD=${{ secrets.DB_PASSWORD }},_DB_SCHEMA=${{ secrets.DB_SCHEMA }}"

    - name: Show Output
      run: |
        echo "************************************"
        echo "* Service URL:"
        gcloud run services describe ${{ env.SERVICE_NAME }} --platform managed --region ${{ env.REGION }} --format='value(status.url)'
        echo "************************************"
